# -*- coding: utf-8 -*-
"""ABSorBEnT-Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wtn4r6jHpymiujbTVBZ3HXuaKJWLPuH5
"""

!pip install openai==0.28

import json
import re
import time

import numpy as np
import openai
import requests

openai.api_key = #Your OpenAI API key, starting with sk-

qa_filepath = "/content/ABSorBEnT-QA-Pairs.tsv"

#GET QUESTIONS FROM DATASET (and answer for accuracy testing later)
import csv

questions = []
answers = []
with open(qa_filepath, "r") as f:
  for line in f:
    tabs = line.split('\t')
    questions.append(tabs[0])
    answers.append(tabs[1])

print(questions[1])

class ABSorBEnT:

    #FUNCTION: Use GPT 3.5 Turbo to answer the user's question
    #RETURNS: The answer as a string (str)
    def answer(self, question: str) -> str:

        #Call GPT 3.5 Turbo to find the answer to the given question
        response = openai.ChatCompletion.create(
          model='gpt-3.5-turbo',
          messages=[
            {"role": "system", "content": "You are a helpful assistant designed to answer biology, chemistry, and bioinformatics questions."},
            #{"role": "system", "content": "Answer each question three times."},
            {"role": "system", "content": "Only give the answer to the question, without other words."},
            {'role':'user', 'content': question}
          ]
        )

        #Extract the response from the model
        return response['choices'][0]['message']['content']

results = []
results.append("***ABSorBEnT Results***") #just to keep indexes consistent with questions[] and answers[] (header index)

if __name__ == '__main__':
    absorbent_model = ABSorBEnT()

    for index in range(10):
      print("\n " + str(index+1) + ". *************************************** \n")
      results.append(absorbent_model.answer(questions[index+1]))
      print(results[index+1])
      print(answers[index+1])

#this standardization method is not comprehensive, but good enough for the task
#anything missed I did manually
def standardize(ans):
  ans = ans.lower()
  ans = ans.replace("ala", "a")
  ans = ans.replace("arg", "r")
  ans = ans.replace("asn", "n")
  ans = ans.replace("asp", "d")
  ans = ans.replace("cys", "c")
  ans = ans.replace("glu", "e")
  ans = ans.replace("gln", "q")
  ans = ans.replace("gly", "g")
  ans = ans.replace("his", "h")
  ans = ans.replace("ile", "i")
  ans = ans.replace("leu", "l")
  ans = ans.replace("lys", "k")
  ans = ans.replace("met", "m")
  ans = ans.replace("phe", "f")
  ans = ans.replace("pro", "p")
  ans = ans.replace("ser", "s")
  ans = ans.replace("thr", "t")
  ans = ans.replace("trp", "w")
  ans = ans.replace("tyr", "y")
  ans = ans.replace("val", "v")
  ans = ans.replace(" ", "").replace("\n", "").replace("-", "")
  return ans

for index in range(10):
  if index == 0:
    continue
  standardized = standardize(results[index])
  print(standardized)
  if standardized == answers[index].lower():
    print("**CORRECT**")